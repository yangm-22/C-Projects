#include<stdio.h>
#include<stdlib.h>

int getRekt (int n, int* numAdditions, int* numSubtractions) ;

int main () {
	int additions;
	int subtractions;

	int correct_recaman[20] =      {0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9, 24,  8, 25, 43};
	int correct_additions[20] =    {0, 1, 2, 3, 3, 4,  5,  6,  6,  7,  7,  8,  8,  9, 9, 10, 10, 11, 12};
	int correct_subtractions[20] = {0, 0, 0, 0, 1, 1,  1,  1,  2,  2,  3,  3,  4,  4, 5,  5,  6,  6,  6};

	int x;

	for (int i = 1; i <= 19; i++) {
		additions = 0;
		subtractions = 0;
		x = getRekt(i,&additions,&subtractions);
		printf("For n = %d...\n", i);
		if (x == correct_recaman[i-1]) {
			printf("\tThe return value (%d) is correct.\n", x);
		} else {
			printf("\tThe return value (%d) is INCORRECT and should be %d.\n", x, correct_recaman[i-1]);
		} 
		if (additions == correct_additions[i-1]) {
			printf("\tThe number of additions (%d) is correct.\n", additions);
		} else {
			printf("\tThe number of additions (%d) is INCORRECT and should be %d.\n", additions, correct_additions[i-1]);
		} 
		if (subtractions == correct_subtractions[i-1]) {
			printf("\tThe number of subtractions (%d) is correct.\n", subtractions);
		} else {
			printf("\tThe number of subtractions (%d) is INCORRECT and should be %d.\n", subtractions, correct_subtractions[i-1]);
		} 
	}
}



int getRekt (int n, int* numAdditions, int* numSubtractions) 
{
    //int size = sizeof(index)/sizeof(index[0]);
    //int Rn;
	int *ptr = (int*)malloc(n*sizeof(int));
    int array_Rn[n+1];
	//flag
	int exist = 0;
    for (int i=0 ; i<n ; i++){
        //int *array = (int*) malloc(sizeof(int)); 
        
        if (i==0){
            array_Rn[0]=0;
			break;
        }
		
        else{

            int number = array_Rn[i-1] - i;
			*numSubtractions = *numSubtractions + 1;
            //check if array exists in array_Rn

			for (int j=0 ; j < n ; j++){
				if (array_Rn[j]==number || number < 0 ){
					exist = 1;
					break;
				}
			}


            if (exist==1){
                number = i + array_Rn[i-1];
				*numSubtractions = *numSubtractions - 1;
				*numAdditions = *numAdditions + 1;
            }
			 
            array_Rn[i] = number;
			printf("Number:%d\n,",number);

        }
    }
	if(n==1){
		 printf("Printing array:\n");
    for (int j=0 ; j <n ; j++){
       	 printf("%d,",array_Rn[j]);
    }
	}
   
	return array_Rn[n];
}




